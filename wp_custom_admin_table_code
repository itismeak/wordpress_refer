//custom admin table display new admin menu plugin      refer-> https://wpengineer.com/2426/wp_list_table-a-step-by-step-guide/

// code to make admin menu and page for plugin
add_action( 'admin_menu', 'my_new_plugin_menu' );
function my_new_plugin_menu() {
    add_menu_page('plugin-customization_1', 'Admin_table',
    'manage_options','formainnn','my_render_list_page');
}

function my_render_list_page(){
  $myListTable = new My_List_Table();
  echo '<div class="wrap"><h2>my_example_table</h2>'; 
  $myListTable->prepare_items(); 
  $myListTable->display(); 
  
  echo '</div>'; 
}

if( ! class_exists( 'WP_List_Table' ) ) {
    require_once( ABSPATH . 'wp-admin/includes/class-wp-list-table.php' );
}

class My_List_Table extends WP_List_Table {
    //get data from table
    function get_data(){
        global $wpdb;
        $table_name = $wpdb->prefix.'my_example_table';
        $results = $wpdb->get_results("SELECT * FROM $table_name");
        
        return $results;
    }
    //admin table display 
    function get_columns(){
        $columns = array(
        'cb'        => '<input type="checkbox" />',
        'id' => 'ID',
        'name' => 'Name',
        'email' => 'Email',
        'subject' => 'Subject',
        'message' => 'Message',
        'created_at' => 'Created',
        'updated_at' => 'Updated' 
        );
        return $columns;       
    }
    //controll overall behaviour of table
    function prepare_items(){
        $columns = $this->get_columns();
        $hidden = array();
        $sortable =$this->get_sortable_columns();
        $this->_column_headers = array($columns, $hidden, $sortable);
        $this->items = $this->get_data();

        //sort 
        usort( $this->get_data(), array( &$this, ‘usort_reorder’ ) );

       
    }

    function column_default( $item, $column_name ) {
        
        switch( $column_name ) {
        case 'id':
        case 'name':
        case 'email':
        case 'subject':
        case 'message':
        case 'created_at':
        case 'updated_at':
        return  $item -> $column_name;
        default:
        return print_r( $item, true ) ; //Show the whole array for troubleshooting purposes
        }
    } 
    // add sort option 
    function get_sortable_columns() {
        $sortable_column = array(
            'id'  => array('id',false),
            'name' => array('name',false),
            'email'   => array('email',false),
            'subject'   => array('subject',false),
            'message'   => array('message',false),
            'created_at'   => array('created_at',false),
            'updated_at'   => array('updated_at',false)
        );
        return $sortable_column;
    }
    function usort_reorder( $a, $b ) {
        // If no sort, default to title
        $orderby = ( ! empty( $_GET['orderby'] ) ) ? $_GET['orderby'] : 'id';
        // If no order, default to asc
        $order = ( ! empty($_GET['order'] ) ) ? $_GET['order'] : 'asc';
        // Determine sort order
        $result = strcmp( $a[$orderby], $b[$orderby] );
        // Send final sort direction to usort
        return ( $order === 'asc' ) ? $result : -$result;
    }

    //Actions are used to manipulate data means to update or delete data.
    function column_id($item) {
        $actions = array(
        'edit' => sprintf('<a href="?
        page=%s&action=%s&book=%s">Edit</a>',$_REQUEST->page,'edit',$item->ID),
        'delete' => sprintf('<a href="?
        page=%s&action=%s&book=%s">Delete</a>',$_REQUEST->page,'delete',$item->ID),
        );
    return sprintf('%1$s %2$s', $item->id, $this->row_actions($actions) );
    }

    //Bulk Actions
    function get_bulk_actions() {
    $actions = array(
    'delete' => 'Delete',
    'edit' => 'Edit'
    );
    return $actions;
    }

    //For enabling bulk actions we require checkboxes , the following code makes the  required checkboxes .
    function column_cb($item) {
    return sprintf(
    '<input type="checkbox" name="book[]" value="%s" />', $item->ID
    );
    }

    
}
